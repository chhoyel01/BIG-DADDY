<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Multi-Bet Predictor</title>
  <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@400;600;700&display=swap" rel="stylesheet">
  <style>
    :root {
      --primary: #6c5ce7;
      --secondary: #a29bfe;
      --dark: #2d3436;
      --darker: #1a1a1a;
      --light: #f5f6fa;
      --success: #00b894;
      --danger: #d63031;
      --warning: #fdcb6e;
      --info: #0984e3;
      --violet: #6c5ce7;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Montserrat', sans-serif;
      background-color: var(--darker);
      color: var(--light);
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      margin: 0;
      background-image: radial-gradient(circle at 10% 20%, rgba(108, 92, 231, 0.1) 0%, rgba(108, 92, 231, 0.05) 90%);
    }

    .game-container {
      background: linear-gradient(145deg, #232323, #1e1e1e);
      padding: 2rem;
      border-radius: 16px;
      width: 100%;
      max-width: 500px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.05);
      position: relative;
      overflow: hidden;
    }

    .game-container::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(108, 92, 231, 0.1) 0%, transparent 70%);
      z-index: -1;
      animation: rotate 20s linear infinite;
    }

    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .header {
      text-align: center;
      font-size: 1.8rem;
      margin-bottom: 1.5rem;
      font-weight: 700;
      color: var(--light);
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      position: relative;
    }

    .header::after {
      content: '';
      display: block;
      width: 60px;
      height: 3px;
      background: var(--primary);
      margin: 0.5rem auto 0;
      border-radius: 3px;
    }

    .wallet {
      text-align: center;
      margin-bottom: 1.5rem;
      font-size: 1.1rem;
      background: rgba(0, 0, 0, 0.3);
      padding: 0.8rem;
      border-radius: 8px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .wallet-info {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .wallet-icon {
      color: var(--warning);
    }

    .add-money-btn {
      background: linear-gradient(135deg, var(--success), #00a884);
      border: none;
      border-radius: 5px;
      padding: 0.4rem 0.8rem;
      color: white;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .add-money-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .add-money-btn:active {
      transform: translateY(0);
    }

    .money-modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .money-modal.show {
      opacity: 1;
      pointer-events: all;
    }

    .money-modal-content {
      background: linear-gradient(145deg, #232323, #1e1e1e);
      padding: 2rem;
      border-radius: 12px;
      width: 90%;
      max-width: 400px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.5);
      border: 1px solid rgba(255, 255, 255, 0.1);
      position: relative;
    }

    .money-modal-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
    }

    .money-modal-title {
      font-size: 1.3rem;
      font-weight: 600;
    }

    .close-modal {
      background: none;
      border: none;
      color: rgba(255, 255, 255, 0.7);
      font-size: 1.5rem;
      cursor: pointer;
    }

    .money-options {
      display: grid;
      grid-template-columns: repeat(2, 1fr);
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .money-option {
      background: rgba(0, 0, 0, 0.3);
      border: 1px solid rgba(255, 255, 255, 0.1);
      border-radius: 8px;
      padding: 1rem;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .money-option:hover {
      background: rgba(108, 92, 231, 0.2);
      border-color: var(--primary);
    }

    .money-option.selected {
      background: rgba(108, 92, 231, 0.4);
      border-color: var(--primary);
      box-shadow: 0 0 0 2px rgba(108, 92, 231, 0.3);
    }

    .custom-amount {
      margin-top: 1rem;
    }

    .custom-amount input {
      width: 100%;
      padding: 0.8rem;
      border-radius: 8px;
      border: none;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      font-size: 1rem;
      margin-bottom: 1rem;
    }

    .custom-amount input:focus {
      outline: none;
      border: 1px solid var(--primary);
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
    }

    .modal-actions button {
      flex: 1;
      padding: 0.8rem;
      border: none;
      border-radius: 8px;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .confirm-btn {
      background: linear-gradient(135deg, var(--success), #00a884);
      color: white;
    }

    .cancel-btn {
      background: rgba(255, 255, 255, 0.1);
      color: white;
    }

    .timer-container {
      text-align: center;
      background: linear-gradient(135deg, var(--primary), var(--violet));
      padding: 1rem;
      border-radius: 12px;
      margin-bottom: 1.5rem;
      box-shadow: 0 4px 15px rgba(108, 92, 231, 0.4);
      position: relative;
      overflow: hidden;
    }

    .timer-container::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.1), transparent);
      transform: translateX(-100%);
      animation: shine 3s infinite;
    }

    @keyframes shine {
      100% { transform: translateX(100%); }
    }

    .timer {
      font-size: 1.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
    }

    .period {
      font-size: 0.9rem;
      opacity: 0.8;
    }

    .lock-warning {
      text-align: center;
      font-size: 0.9rem;
      color: var(--warning);
      margin-bottom: 1rem;
      padding: 0.5rem;
      background: rgba(253, 203, 110, 0.1);
      border-radius: 6px;
      display: none;
      animation: pulse 2s infinite;
    }

    @keyframes pulse {
      0% { opacity: 0.8; }
      50% { opacity: 1; }
      100% { opacity: 0.8; }
    }

    .section {
      margin-bottom: 1.5rem;
      background: rgba(0, 0, 0, 0.2);
      padding: 1rem;
      border-radius: 10px;
      border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 0.8rem;
    }

    .section-title {
      font-size: 0.9rem;
      text-transform: uppercase;
      letter-spacing: 1px;
      color: rgba(255, 255, 255, 0.7);
    }

    .section-bet {
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }

    .section-bet input {
      width: 70px;
      padding: 0.4rem;
      border-radius: 5px;
      border: none;
      background: rgba(255, 255, 255, 0.1);
      color: white;
      text-align: center;
      font-weight: 600;
    }

    .section-bet input:focus {
      outline: none;
      border-color: var(--primary);
      box-shadow: 0 0 0 2px rgba(108, 92, 231, 0.3);
    }

    .buttons {
      display: flex;
      flex-wrap: wrap;
      gap: 0.8rem;
      justify-content: center;
    }

    .buttons button {
      padding: 0.8rem 1rem;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: 600;
      min-width: 70px;
      transition: all 0.3s ease;
      position: relative;
      overflow: hidden;
      color: white;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .buttons button:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 10px rgba(0, 0, 0, 0.2);
    }

    .buttons button:active {
      transform: translateY(0);
    }

    .buttons button::after {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
      transform: translateX(-100%);
    }

    .buttons button:hover::after {
      animation: shine 1.5s infinite;
    }

    .green { background: linear-gradient(135deg, var(--success), #00a884); }
    .red { background: linear-gradient(135deg, var(--danger), #c0392b); }
    .violet { background: linear-gradient(135deg, var(--violet), #5d4ac9); }
    .big { background: linear-gradient(135deg, var(--info), #0974c0); font-size: 1rem; padding: 1rem 1.5rem; }
    .small { background: linear-gradient(135deg, #00cec9, #00a8a3); font-size: 1rem; padding: 1rem 1.5rem; }
    .number-btn { 
      background: linear-gradient(135deg, #636e72, #4a5357);
      flex: 1 0 calc(20% - 0.8rem);
      min-width: 0;
      aspect-ratio: 1;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
      font-weight: 700;
      padding: 0;
    }

    .number-grid {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      justify-content: space-between;
    }

    .selected {
      transform: scale(1.05);
      box-shadow: 0 0 0 3px var(--warning), 0 6px 15px rgba(0, 0, 0, 0.3) !important;
      animation: pulse-selected 1.5s infinite;
    }

    @keyframes pulse-selected {
      0% { box-shadow: 0 0 0 3px var(--warning), 0 6px 15px rgba(0, 0, 0, 0.3); }
      50% { box-shadow: 0 0 0 6px rgba(253, 203, 110, 0.5), 0 6px 15px rgba(0, 0, 0, 0.3); }
      100% { box-shadow: 0 0 0 3px var(--warning), 0 6px 15px rgba(0, 0, 0, 0.3); }
    }

    .results {
      margin-top: 2rem;
      background: rgba(0, 0, 0, 0.2);
      border-radius: 12px;
      padding: 1rem;
      border: 1px solid rgba(255, 255, 255, 0.05);
    }

    .results-title {
      text-align: center;
      margin-bottom: 1rem;
      font-size: 1rem;
      opacity: 0.8;
    }

    .results table {
      width: 100%;
      border-collapse: collapse;
    }

    .results th {
      background: rgba(108, 92, 231, 0.2);
      padding: 0.6rem;
      text-align: center;
      font-size: 0.8rem;
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .results td {
      border-bottom: 1px solid rgba(255, 255, 255, 0.05);
      padding: 0.6rem;
      text-align: center;
      font-weight: 600;
    }

    .results tr:last-child td {
      border-bottom: none;
    }

    .results tr:hover {
      background: rgba(255, 255, 255, 0.03);
    }

    .dot {
      height: 16px;
      width: 16px;
      display: inline-block;
      border-radius: 50%;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    }

    .dot.green { background: linear-gradient(135deg, var(--success), #00a884); }
    .dot.red { background: linear-gradient(135deg, var(--danger), #c0392b); }
    .dot.violet { background: linear-gradient(135deg, var(--violet), #5d4ac9); }

    .disabled {
      pointer-events: none;
      opacity: 0.5;
      transform: none !important;
    }

    .win-animation {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: radial-gradient(circle, rgba(0, 184, 148, 0.3), transparent);
      z-index: 100;
      display: none;
      pointer-events: none;
      animation: fadeIn 0.5s ease-out;
    }

    .win-text {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      font-size: 3rem;
      font-weight: 700;
      color: white;
      text-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);
      animation: zoomIn 0.5s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }

    @keyframes zoomIn {
      from { transform: translate(-50%, -50%) scale(0.5); opacity: 0; }
      to { transform: translate(-50%, -50%) scale(1); opacity: 1; }
    }

    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      background-color: #f00;
      opacity: 0;
    }

    .notification {
      position: fixed;
      top: 20px;
      right: 20px;
      background: linear-gradient(135deg, var(--primary), var(--violet));
      color: white;
      padding: 1rem 1.5rem;
      border-radius: 8px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
      transform: translateX(200%);
      transition: transform 0.3s ease;
      z-index: 1000;
      display: flex;
      align-items: center;
      gap: 0.8rem;
    }

    .notification.show {
      transform: translateX(0);
    }

    .notification-icon {
      font-size: 1.5rem;
    }

    .notification-content {
      display: flex;
      flex-direction: column;
    }

    .notification-title {
      font-weight: 600;
      margin-bottom: 0.2rem;
    }

    .notification-message {
      font-size: 0.9rem;
      opacity: 0.9;
    }

    .bet-summary {
      display: flex;
      justify-content: space-between;
      margin-bottom: 1rem;
      padding: 0.8rem;
      background: rgba(0, 0, 0, 0.3);
      border-radius: 8px;
      font-size: 0.9rem;
    }

    .bet-total {
      font-weight: 600;
      color: var(--warning);
    }

    @media (max-width: 500px) {
      .game-container {
        padding: 1.5rem;
        border-radius: 0;
        min-height: 100vh;
      }
      
      .buttons button {
        padding: 0.7rem;
        min-width: 60px;
        font-size: 0.9rem;
      }
      
      .big, .small {
        padding: 0.8rem 1rem !important;
      }
      
      .section-bet input {
        width: 60px;
      }

      .number-btn {
        flex: 1 0 calc(20% - 0.5rem);
        font-size: 1rem;
      }

      .wallet {
        flex-direction: column;
        gap: 0.5rem;
      }

      .wallet-info {
        width: 100%;
        justify-content: center;
      }

      .add-money-btn {
        width: 100%;
        padding: 0.5rem;
      }
    }
  </style>
</head>
<body>
  <div class="game-container">
    <div class="header">Multi-Bet Predictor</div>
    <div class="wallet">
      <div class="wallet-info">
        <span class="wallet-icon">💰</span>
        Balance: $<span id="wallet">5000</span>
      </div>
      <button class="add-money-btn" id="addMoneyBtn">Add Money</button>
    </div>
    
    <div class="bet-summary">
      <div>Total Bets: <span class="bet-total" id="totalBet">0</span></div>
      <div>Potential Win: <span class="bet-total" id="potentialWin">0</span></div>
    </div>
    
    <div class="timer-container">
      <div class="timer">Time Remaining: <span id="countdown">30</span>s</div>
      <div class="period">Round: <span id="period">1</span></div>
    </div>
    <div id="lock-warning" class="lock-warning">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2z"/>
      </svg>
      Bidding locked! Wait for next round.
    </div>

    <div class="section">
      <div class="section-header">
        <div class="section-title">Pick Color</div>
        <div class="section-bet">
          <span>Bet:</span>
          <input type="number" id="colorBet" min="1" max="20000" placeholder="0">
        </div>
      </div>
      <div class="buttons" id="color-buttons">
        <button class="green" onclick="toggleColor('green', this)">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
          </svg>
          Green (x2)
        </button>
        <button class="red" onclick="toggleColor('red', this)">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM5.354 4.646a.5.5 0 1 0-.708.708L7.293 8l-2.647 2.646a.5.5 0 0 0 .708.708L8 8.707l2.646 2.647a.5.5 0 0 0 .708-.708L8.707 8l2.647-2.646a.5.5 0 0 0-.708-.708L8 7.293 5.354 4.646z"/>
          </svg>
          Red (x2)
        </button>
        <button class="violet" onclick="toggleColor('violet', this)">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
            <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
          </svg>
          Violet (x4.5)
        </button>
      </div>
    </div>

    <div class="section">
      <div class="section-header">
        <div class="section-title">Pick Number (0-9)</div>
        <div class="section-bet">
          <span>Bet:</span>
          <input type="number" id="numberBet" min="1" max="20000" placeholder="0">
        </div>
      </div>
      <div class="buttons number-grid" id="number-buttons"></div>
    </div>

    <div class="section">
      <div class="section-header">
        <div class="section-title">Big / Small</div>
        <div class="section-bet">
          <span>Bet:</span>
          <input type="number" id="sizeBet" min="1" max="20000" placeholder="0">
        </div>
      </div>
      <div class="buttons" id="size-buttons">
        <button class="big" onclick="toggleSize('Big', this)">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
            <path d="M8 15a.5.5 0 0 0 .5-.5V2.707l3.146 3.147a.5.5 0 0 0 .708-.708l-4-4a.5.5 0 0 0-.708 0l-4 4a.5.5 0 1 0 .708.708L7.5 2.707V14.5a.5.5 0 0 0 .5.5z"/>
          </svg>
          Big (5-9) (x2)
        </button>
        <button class="small" onclick="toggleSize('Small', this)">
          <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" style="margin-right: 5px;">
            <path d="M8 1a.5.5 0 0 1 .5.5v11.793l3.146-3.147a.5.5 0 0 1 .708.708l-4 4a.5.5 0 0 1-.708 0l-4-4a.5.5 0 0 1 .708-.708L7.5 13.293V1.5A.5.5 0 0 1 8 1z"/>
          </svg>
          Small (0-4) (x2)
        </button>
      </div>
    </div>

    <div class="results">
      <div class="results-title">Recent Results</div>
      <table>
        <thead>
          <tr>
            <th>Round</th>
            <th>Number</th>
            <th>Size</th>
            <th>Color</th>
          </tr>
        </thead>
        <tbody id="resultTable"></tbody>
      </table>
    </div>
  </div>

  <!-- Add Money Modal -->
  <div class="money-modal" id="moneyModal">
    <div class="money-modal-content">
      <div class="money-modal-header">
        <div class="money-modal-title">Add Money to Wallet</div>
        <button class="close-modal" id="closeModal">&times;</button>
      </div>
      <div class="money-options">
        <div class="money-option" data-amount="100" onclick="selectMoneyOption(100, this)">$100</div>
        <div class="money-option" data-amount="500" onclick="selectMoneyOption(500, this)">$500</div>
        <div class="money-option" data-amount="1000" onclick="selectMoneyOption(1000, this)">$1,000</div>
        <div class="money-option" data-amount="5000" onclick="selectMoneyOption(5000, this)">$5,000</div>
      </div>
      <div class="custom-amount">
        <input type="number" id="customAmount" placeholder="Enter custom amount" min="1">
      </div>
      <div class="modal-actions">
        <button class="cancel-btn" id="cancelAddMoney">Cancel</button>
        <button class="confirm-btn" id="confirmAddMoney">Add Money</button>
      </div>
    </div>
  </div>

  <div class="win-animation" id="winAnimation">
    <div class="win-text">WINNER!</div>
  </div>

  <div class="notification" id="notification">
    <div class="notification-icon">
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" viewBox="0 0 16 16">
        <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"/>
      </svg>
    </div>
    <div class="notification-content">
      <div class="notification-title" id="notifTitle">Notification</div>
      <div class="notification-message" id="notifMessage">This is a notification message</div>
    </div>
  </div>

  <!-- Audio elements -->
  <audio id="winSound" src="https://assets.mixkit.co/sfx/preview/mixkit-winning-chimes-2015.mp3"></audio>
  <audio id="loseSound" src="https://assets.mixkit.co/sfx/preview/mixkit-retro-arcade-lose-2027.mp3"></audio>
  <audio id="tickSound" src="https://assets.mixkit.co/sfx/preview/mixkit-clock-countdown-bleeps-916.mp3"></audio>
  <audio id="selectSound" src="https://assets.mixkit.co/sfx/preview/mixkit-quick-jump-arcade-game-239.mp3"></audio>
  <audio id="countdownSound" src="https://assets.mixkit.co/sfx/preview/mixkit-unlock-game-notification-253.mp3"></audio>
  <audio id="resultSound" src="https://assets.mixkit.co/sfx/preview/mixkit-achievement-bell-600.mp3"></audio>
  <audio id="cashSound" src="https://assets.mixkit.co/sfx/preview/mixkit-cash-register-purchase-880.mp3"></audio>

  <script>
    let countdown = 30;
    let period = 1;
    let walletBalance = 5000;
    let bidDeducted = false;
    let lastWinAmount = 0;
    let selectedMoneyOption = null;
    let selectedMoneyElement = null;
    
    // Betting state
    const bets = {
      color: { type: null, amount: 0, multiplier: 0 },
      number: { type: null, amount: 0, multiplier: 9 },
      size: { type: null, amount: 0, multiplier: 2 }
    };

    const countdownEl = document.getElementById('countdown');
    const periodEl = document.getElementById('period');
    const resultTable = document.getElementById('resultTable');
    const numberButtonsContainer = document.getElementById('number-buttons');
    const winSound = document.getElementById('winSound');
    const loseSound = document.getElementById('loseSound');
    const tickSound = document.getElementById('tickSound');
    const selectSound = document.getElementById('selectSound');
    const countdownSound = document.getElementById('countdownSound');
    const resultSound = document.getElementById('resultSound');
    const cashSound = document.getElementById('cashSound');
    const lockWarning = document.getElementById('lock-warning');
    const walletDisplay = document.getElementById('wallet');
    const winAnimation = document.getElementById('winAnimation');
    const notification = document.getElementById('notification');
    const notifTitle = document.getElementById('notifTitle');
    const notifMessage = document.getElementById('notifMessage');
    const totalBetEl = document.getElementById('totalBet');
    const potentialWinEl = document.getElementById('potentialWin');
    const moneyModal = document.getElementById('moneyModal');
    const addMoneyBtn = document.getElementById('addMoneyBtn');
    const closeModal = document.getElementById('closeModal');
    const cancelAddMoney = document.getElementById('cancelAddMoney');
    const confirmAddMoney = document.getElementById('confirmAddMoney');
    const customAmountInput = document.getElementById('customAmount');
    
    // Bet inputs
    const colorBetInput = document.getElementById('colorBet');
    const numberBetInput = document.getElementById('numberBet');
    const sizeBetInput = document.getElementById('sizeBet');

    // Create number buttons in a grid layout (2 rows of 5 numbers)
    for (let i = 0; i <= 9; i++) {
      const btn = document.createElement('button');
      btn.className = 'number-btn';
      btn.innerHTML = `<span>${i}</span>`;
      btn.onclick = () => toggleNumber(i, btn);
      numberButtonsContainer.appendChild(btn);
    }

    // Modal event listeners
    addMoneyBtn.addEventListener('click', () => {
      moneyModal.classList.add('show');
    });

    closeModal.addEventListener('click', () => {
      moneyModal.classList.remove('show');
      resetMoneySelection();
    });

    cancelAddMoney.addEventListener('click', () => {
      moneyModal.classList.remove('show');
      resetMoneySelection();
    });

    confirmAddMoney.addEventListener('click', () => {
      let amountToAdd = selectedMoneyOption;
      
      // If custom amount is entered and no option is selected
      if (!amountToAdd && customAmountInput.value) {
        amountToAdd = parseInt(customAmountInput.value);
      }
      
      if (amountToAdd && amountToAdd > 0) {
        walletBalance += amountToAdd;
        walletDisplay.textContent = walletBalance;
        cashSound.play();
        showNotification('Wallet Updated', `$${amountToAdd} added to your wallet!`);
        moneyModal.classList.remove('show');
        resetMoneySelection();
      } else {
        showNotification('Error', 'Please select or enter a valid amount');
      }
    });

    function selectMoneyOption(amount, element) {
      // Reset previous selection
      if (selectedMoneyElement) {
        selectedMoneyElement.classList.remove('selected');
      }
      
      // Set new selection
      selectedMoneyOption = amount;
      selectedMoneyElement = element;
      element.classList.add('selected');
      customAmountInput.value = '';
    }

    function resetMoneySelection() {
      if (selectedMoneyElement) {
        selectedMoneyElement.classList.remove('selected');
      }
      selectedMoneyOption = null;
      selectedMoneyElement = null;
      customAmountInput.value = '';
    }

    function toggleNumber(num, btn) {
      if (countdown < 6 || countdown > 30) return;
      selectSound.play();
      
      if (bets.number.type === num) {
        // Deselect
        bets.number.type = null;
        btn.classList.remove('selected');
        numberBetInput.value = '';
      } else {
        // Select new number
        bets.number.type = num;
        document.querySelectorAll('.number-btn').forEach(b => b.classList.remove('selected'));
        btn.classList.add('selected');
      }
      
      updateBetSummary();
    }

    function toggleColor(color, btn) {
      if (countdown < 6 || countdown > 30) return;
      selectSound.play();
      
      if (bets.color.type === color) {
        // Deselect
        bets.color.type = null;
        btn.classList.remove('selected');
        colorBetInput.value = '';
        bets.color.multiplier = 0;
      } else {
        // Select new color
        bets.color.type = color;
        document.querySelectorAll('#color-buttons button').forEach(b => b.classList.remove('selected'));
        btn.classList.add('selected');
        
        // Set multiplier based on color
        bets.color.multiplier = color === 'violet' ? 4.5 : 2;
      }
      
      updateBetSummary();
    }

    function toggleSize(size, btn) {
      if (countdown < 6 || countdown > 30) return;
      selectSound.play();
      
      if (bets.size.type === size) {
        // Deselect
        bets.size.type = null;
        btn.classList.remove('selected');
        sizeBetInput.value = '';
      } else {
        // Select new size
        bets.size.type = size;
        document.querySelectorAll('#size-buttons button').forEach(b => b.classList.remove('selected'));
        btn.classList.add('selected');
      }
      
      updateBetSummary();
    }

    // Update bet amounts from inputs
    function updateBetAmounts() {
      bets.color.amount = parseInt(colorBetInput.value) || 0;
      bets.number.amount = parseInt(numberBetInput.value) || 0;
      bets.size.amount = parseInt(sizeBetInput.value) || 0;
      updateBetSummary();
    }

    // Calculate and display total bet and potential win
    function updateBetSummary() {
      const totalBet = bets.color.amount + bets.number.amount + bets.size.amount;
      let potentialWin = 0;
      
      if (bets.color.type) potentialWin += bets.color.amount * bets.color.multiplier;
      if (bets.number.type !== null) potentialWin += bets.number.amount * bets.number.multiplier;
      if (bets.size.type) potentialWin += bets.size.amount * bets.size.multiplier;
      
      totalBetEl.textContent = totalBet;
      potentialWinEl.textContent = potentialWin;
    }

    // Event listeners for bet inputs
    colorBetInput.addEventListener('input', updateBetAmounts);
    numberBetInput.addEventListener('input', updateBetAmounts);
    sizeBetInput.addEventListener('input', updateBetAmounts);

    function updateCountdown() {
      countdown--;
      countdownEl.textContent = countdown;

      // Play tick sound in last 5 seconds
      if (countdown <= 5 && countdown > 0) {
        tickSound.play();
      }

      if (countdown === 5) {
        countdownSound.play();
      }

      if (countdown < 6) {
        document.querySelectorAll('button').forEach(btn => btn.classList.add('disabled'));
        colorBetInput.disabled = true;
        numberBetInput.disabled = true;
        sizeBetInput.disabled = true;
        lockWarning.style.display = 'flex';

        // Deduct bid if not already deducted
        if (!bidDeducted) {
          const totalBet = bets.color.amount + bets.number.amount + bets.size.amount;
          const hasBets = bets.color.type !== null || bets.number.type !== null || bets.size.type !== null;
          
          if (hasBets && totalBet > 0) {
            if (totalBet > walletBalance) {
              showNotification('Error', 'Insufficient wallet balance!');
              resetSelections();
            } else {
              walletBalance -= totalBet;
              walletDisplay.textContent = walletBalance;
              bidDeducted = true;
              showNotification('Bets Placed', `You've bet $${totalBet} for this round!`);
            }
          }
        }
      } else {
        document.querySelectorAll('button').forEach(btn => btn.classList.remove('disabled'));
        colorBetInput.disabled = false;
        numberBetInput.disabled = false;
        sizeBetInput.disabled = false;
        lockWarning.style.display = 'none';
      }

      if (countdown === 0) {
        generateResult();
        countdown = 30;
        bidDeducted = false;
      }
    }

    function generateResult() {
      const number = Math.floor(Math.random() * 10);
      const size = number >= 5 ? 'Big' : 'Small';
      const colors = ['green', 'red', 'violet'];
      const color = colors[Math.floor(Math.random() * colors.length)];

      // Create result row with animation
      const resultRow = document.createElement('tr');
      resultRow.style.opacity = '0';
      resultRow.style.transform = 'translateY(-20px)';
      resultRow.innerHTML = `
        <td>${period}</td>
        <td><strong>${number}</strong></td>
        <td>${size}</td>
        <td><span class='dot ${color}'></span></td>
      `;
      resultTable.insertBefore(resultRow, resultTable.firstChild);
      
      // Animate the new row
      setTimeout(() => {
        resultRow.style.transition = 'all 0.3s ease';
        resultRow.style.opacity = '1';
        resultRow.style.transform = 'translateY(0)';
      }, 10);

      // Keep only last 10 results
      while (resultTable.rows.length > 10) {
        resultTable.removeChild(resultTable.lastChild);
      }

      // Calculate winnings
      let totalWin = 0;
      
      // Check color bet
      if (bets.color.type === color) {
        totalWin += bets.color.amount * bets.color.multiplier;
      }
      
      // Check number bet
      if (bets.number.type === number) {
        totalWin += bets.number.amount * bets.number.multiplier;
      }
      
      // Check size bet
      if (bets.size.type === size) {
        totalWin += bets.size.amount * bets.size.multiplier;
      }
      
      const totalBet = bets.color.amount + bets.number.amount + bets.size.amount;
      
      if (bidDeducted && totalBet > 0) {
        if (totalWin > 0) {
          walletBalance += totalWin;
          lastWinAmount = totalWin;
          showWinAnimation();
          winSound.play();
          showNotification('Winner!', `You won $${totalWin}!`);
        } else {
          loseSound.play();
          showNotification('Try Again', `You lost $${totalBet}. Better luck next time!`);
        }

        walletDisplay.textContent = walletBalance;
      }

      resultSound.play();
      resetSelections();
      period++;
      periodEl.textContent = period;
    }

    function resetSelections() {
      // Reset all bets
      bets.color = { type: null, amount: 0, multiplier: 0 };
      bets.number = { type: null, amount: 0, multiplier: 9 };
      bets.size = { type: null, amount: 0, multiplier: 2 };
      
      // Reset UI
      colorBetInput.value = '';
      numberBetInput.value = '';
      sizeBetInput.value = '';
      document.querySelectorAll('button').forEach(btn => btn.classList.remove('selected'));
      updateBetSummary();
    }

    function showWinAnimation() {
      winAnimation.style.display = 'block';
      createConfetti();
      
      setTimeout(() => {
        winAnimation.style.display = 'none';
      }, 2000);
    }

    function createConfetti() {
      const colors = ['#6c5ce7', '#00b894', '#fdcb6e', '#e17055', '#0984e3', '#d63031'];
      
      for (let i = 0; i < 100; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.opacity = Math.random() + 0.5;
        confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
        confetti.style.width = Math.random() * 10 + 5 + 'px';
        confetti.style.height = Math.random() * 10 + 5 + 'px';
        
        document.body.appendChild(confetti);
        
        const animationDuration = Math.random() * 3 + 2;
        
        confetti.style.animation = `confetti-fall ${animationDuration}s linear forwards`;
        confetti.style.setProperty('--end-y', Math.random() * 100 + 100 + 'vh');
        confetti.style.setProperty('--end-x', Math.random() * 200 - 100 + 'px');
        confetti.style.setProperty('--rotation', Math.random() * 360 + 'deg');
        
        setTimeout(() => {
          confetti.remove();
        }, animationDuration * 1000);
      }
      
      // Add CSS for confetti animation
      const style = document.createElement('style');
      style.textContent = `
        @keyframes confetti-fall {
          0% {
            opacity: 1;
            transform: translate(0, -100px) rotate(0deg);
          }
          100% {
            opacity: 0;
            transform: translate(var(--end-x), var(--end-y)) rotate(var(--rotation));
          }
        }
      `;
      document.head.appendChild(style);
    }

    function showNotification(title, message) {
      notifTitle.textContent = title;
      notifMessage.textContent = message;
      notification.classList.add('show');
      
      setTimeout(() => {
        notification.classList.remove('show');
      }, 3000);
    }

    // Initialize with some example results
    function initExampleResults() {
      const exampleResults = [
        { number: 7, size: 'Big', color: 'green' },
        { number: 2, size: 'Small', color: 'red' },
        { number: 5, size: 'Big', color: 'violet' },
        { number: 9, size: 'Big', color: 'red' },
        { number: 0, size: 'Small', color: 'green' }
      ];
      
      exampleResults.forEach((result, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
          <td>${period + index}</td>
          <td><strong>${result.number}</strong></td>
          <td>${result.size}</td>
          <td><span class='dot ${result.color}'></span></td>
        `;
        resultTable.appendChild(row);
      });
      
      period += exampleResults.length;
      periodEl.textContent = period;
    }

    // Initialize the game
    initExampleResults();
    setInterval(updateCountdown, 1000);
  </script>
</body>
</html>
